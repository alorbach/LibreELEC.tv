diff --git a/drivers/staging/media/sunxi/cedrus/cedrus.h b/drivers/staging/media/sunxi/cedrus/cedrus.h
index 42e845965200..a036cf8f450e 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus.h
+++ b/drivers/staging/media/sunxi/cedrus/cedrus.h
@@ -112,11 +112,13 @@ struct cedrus_ctx {
 		struct {
 			void		*mv_col_buf;
 			dma_addr_t	mv_col_buf_dma;
+			ssize_t		mv_col_buf_unit_size;
 			ssize_t		mv_col_buf_size;
 			void		*neighbor_info_buf;
 			dma_addr_t	neighbor_info_buf_dma;
 			void		*pic_info_buf;
 			dma_addr_t	pic_info_buf_dma;
+			s32		last_frame;
 		} h264;
 		struct {
 			void		*mv_col_buf;
diff --git a/drivers/staging/media/sunxi/cedrus/cedrus_h264.c b/drivers/staging/media/sunxi/cedrus/cedrus_h264.c
index e697d1e91f23..9ba9332fbb40 100644
--- a/drivers/staging/media/sunxi/cedrus/cedrus_h264.c
+++ b/drivers/staging/media/sunxi/cedrus/cedrus_h264.c
@@ -15,12 +15,14 @@
 #include "cedrus_regs.h"
 
 enum cedrus_h264_sram_off {
-	CEDRUS_SRAM_H264_PRED_WEIGHT_TABLE	= 0x000,
+	CEDRUS_SRAM_H264_PRED_WEIGHT_TABLE0	= 0x000,
+	CEDRUS_SRAM_H264_PRED_WEIGHT_TABLE1	= 0x060,
 	CEDRUS_SRAM_H264_FRAMEBUFFER_LIST	= 0x100,
 	CEDRUS_SRAM_H264_REF_LIST_0		= 0x190,
 	CEDRUS_SRAM_H264_REF_LIST_1		= 0x199,
-	CEDRUS_SRAM_H264_SCALING_LIST_8x8	= 0x200,
-	CEDRUS_SRAM_H264_SCALING_LIST_4x4	= 0x218,
+	CEDRUS_SRAM_H264_SCALING_LIST_8x8_0	= 0x200,
+	CEDRUS_SRAM_H264_SCALING_LIST_8x8_1	= 0x210,
+	CEDRUS_SRAM_H264_SCALING_LIST_4x4	= 0x220,
 };
 
 struct cedrus_h264_sram_ref_pic {
@@ -29,16 +31,16 @@ struct cedrus_h264_sram_ref_pic {
 	__le32	frame_info;
 	__le32	luma_ptr;
 	__le32	chroma_ptr;
-	__le32	extra_data_ptr;
-	__le32	extra_data_end;
+	__le32	extra_data_top;
+	__le32	extra_data_bottom;
 	__le32	reserved;
 } __packed;
 
 /* One for the output, 16 for the reference images */
-#define CEDRUS_H264_FRAME_NUM		17
+#define CEDRUS_H264_FRAME_NUM		18
 
-#define CEDRUS_PIC_INFO_BUF_SIZE	(128 * SZ_1K)
-#define CEDRUS_NEIGHBOR_INFO_BUF_SIZE	(16 * SZ_1K)
+#define CEDRUS_PIC_INFO_BUF_SIZE	(336 * SZ_1K)
+#define CEDRUS_NEIGHBOR_INFO_BUF_SIZE	(32 * SZ_1K)
 
 static void cedrus_h264_write_sram(struct cedrus_dev *dev,
 				   enum cedrus_h264_sram_off off,
@@ -54,23 +56,35 @@ static void cedrus_h264_write_sram(struct cedrus_dev *dev,
 	} while (--count);
 }
 
+static inline dma_addr_t cedrus_h264_frame_info_mv_col_buf_addr(
+	struct cedrus_ctx *ctx, unsigned int index, unsigned int field)
+{
+	return ctx->codec.h264.mv_col_buf_dma + (index * 2 + field) *
+	       ctx->codec.h264.mv_col_buf_unit_size;
+}
+
 static void cedrus_fill_ref_pic(struct cedrus_h264_sram_ref_pic *pic,
-				struct vb2_buffer *buf,
-				struct v4l2_pix_format *fmt,
-				dma_addr_t extra_buf,
-				size_t extra_buf_len,
+				struct cedrus_ctx *ctx,
+				unsigned int index,
 				unsigned int top_field_order_cnt,
 				unsigned int bottom_field_order_cnt,
-				enum cedrus_h264_pic_type pic_type)
+				enum cedrus_h264_pic_type pic_type,
+				u8 flags)
 {
+	unsigned int reference = flags & (V4L2_H264_DPB_ENTRY_FLAG_LONG_TERM | V4L2_H264_DPB_ENTRY_FLAG_SHORT_TERM);
+
 	pic->top_field_order_cnt = top_field_order_cnt;
 	pic->bottom_field_order_cnt = bottom_field_order_cnt;
 	pic->frame_info = pic_type << 8;
 
-	pic->luma_ptr = cedrus_buf_addr(buf, fmt, 0);
-	pic->chroma_ptr = cedrus_buf_addr(buf, fmt, 1);
-	pic->extra_data_ptr = extra_buf;
-	pic->extra_data_end = extra_buf + extra_buf_len;
+	/* FIXME: Try to figure out if this is needed at all */
+	if (!reference)
+		pic->frame_info |= (2 << 4) | (2 << 0);
+
+	pic->luma_ptr = cedrus_dst_buf_addr(ctx, index, 0);
+	pic->chroma_ptr = cedrus_dst_buf_addr(ctx, index, 1);
+	pic->extra_data_top = cedrus_h264_frame_info_mv_col_buf_addr(ctx, index, 0);
+	pic->extra_data_bottom = cedrus_h264_frame_info_mv_col_buf_addr(ctx, index, 1);
 }
 
 static void cedrus_write_frame_list(struct cedrus_ctx *ctx,
@@ -80,19 +94,14 @@ static void cedrus_write_frame_list(struct cedrus_ctx *ctx,
 	const struct v4l2_ctrl_h264_decode_param *dec_param = run->h264.decode_param;
 	const struct v4l2_ctrl_h264_slice_param *slice = run->h264.slice_param;
 	const struct v4l2_ctrl_h264_sps *sps = run->h264.sps;
-	struct cedrus_buffer *output_buf;
 	struct cedrus_dev *dev = ctx->dev;
-	struct vb2_buffer *dst_buf;
-	unsigned long used_dpbs = 0;
-	unsigned int position;
-	unsigned int output = 0;
 	unsigned int i;
 
 	memset(pic_list, 0, sizeof(pic_list));
 
-	for (i = 0; i < ARRAY_SIZE(dec_param->dpb); i++) {
+	for (i = 0; i < 17; i++) {
 		const struct v4l2_h264_dpb_entry *dpb = &dec_param->dpb[i];
-		const struct cedrus_buffer *cedrus_buf;
+		struct cedrus_buffer *cedrus_buf;
 		struct vb2_buffer *ref_buf;
 
 		if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_VALID))
@@ -100,49 +109,30 @@ static void cedrus_write_frame_list(struct cedrus_ctx *ctx,
 
 		ref_buf = ctx->dst_bufs[dpb->buf_index];
 		cedrus_buf = vb2_to_cedrus_buffer(ref_buf);
-		position = cedrus_buf->codec.h264.position;
-		used_dpbs |= BIT(position);
 
 		if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE))
 			continue;
 
-		cedrus_fill_ref_pic(&pic_list[position], ref_buf, &ctx->dst_fmt,
-				    ctx->codec.h264.mv_col_buf_dma,
-				    ctx->codec.h264.mv_col_buf_size,
+		if (slice->buf_index == i) {
+			if (slice->flags & V4L2_H264_SLICE_FLAG_FIELD_PIC)
+				cedrus_buf->codec.h264.pic_type = CEDRUS_H264_PIC_TYPE_FIELD;
+			else if (sps->flags & V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD)
+				cedrus_buf->codec.h264.pic_type = CEDRUS_H264_PIC_TYPE_MBAFF;
+			else
+				cedrus_buf->codec.h264.pic_type = CEDRUS_H264_PIC_TYPE_FRAME;
+		}
+
+		cedrus_fill_ref_pic(&pic_list[i], ctx, dpb->buf_index,
 				    dpb->top_field_order_cnt,
 				    dpb->bottom_field_order_cnt,
-				    cedrus_buf->codec.h264.pic_type);
-
-		output = max(position, output);
+				    cedrus_buf->codec.h264.pic_type,
+				    dpb->flags);
 	}
 
-	position = find_next_zero_bit(&used_dpbs, 17, output);
-	if (position >= 17)
-		position = find_first_zero_bit(&used_dpbs, 17);
-
-	dst_buf = &run->dst->vb2_buf;
-
-	output_buf = vb2_to_cedrus_buffer(dst_buf);
-	output_buf->codec.h264.position = position;
-
-	if (slice->flags & V4L2_H264_SLICE_FLAG_FIELD_PIC)
-		output_buf->codec.h264.pic_type = CEDRUS_H264_PIC_TYPE_FIELD;
-	else if (sps->flags & V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD)
-		output_buf->codec.h264.pic_type = CEDRUS_H264_PIC_TYPE_MBAFF;
-	else
-		output_buf->codec.h264.pic_type = CEDRUS_H264_PIC_TYPE_FRAME;
-
-	cedrus_fill_ref_pic(&pic_list[position], dst_buf, &ctx->dst_fmt,
-			    ctx->codec.h264.mv_col_buf_dma,
-			    ctx->codec.h264.mv_col_buf_size,
-			    dec_param->top_field_order_cnt,
-			    dec_param->bottom_field_order_cnt,
-			    output_buf->codec.h264.pic_type);
-
 	cedrus_h264_write_sram(dev, CEDRUS_SRAM_H264_FRAMEBUFFER_LIST,
 			       pic_list, sizeof(pic_list));
 
-	cedrus_write(dev, VE_H264_OUTPUT_FRAME_IDX, position);
+	cedrus_write(dev, VE_H264_OUTPUT_FRAME_IDX, slice->buf_index);
 }
 
 #define CEDRUS_MAX_REF_IDX	32
@@ -154,43 +144,31 @@ static void _cedrus_write_ref_list(struct cedrus_ctx *ctx,
 {
 	const struct v4l2_ctrl_h264_decode_param *decode = run->h264.decode_param;
 	struct cedrus_dev *dev = ctx->dev;
-	u32 sram_array[CEDRUS_MAX_REF_IDX / sizeof(u32)];
-	unsigned int size, i;
+	u8 sram_array[CEDRUS_MAX_REF_IDX];
+	unsigned int i;
 
 	memset(sram_array, 0, sizeof(sram_array));
+	num_ref = min(num_ref, (u8)CEDRUS_MAX_REF_IDX);
 
-	for (i = 0; i < num_ref; i += 4) {
-		unsigned int j;
+	for (i = 0; i < num_ref; i++) {
+		const struct v4l2_h264_dpb_entry *dpb;
+		u8 dpb_idx;
 
-		for (j = 0; j < 4; j++) {
-			const struct v4l2_h264_dpb_entry *dpb;
-			const struct cedrus_buffer *cedrus_buf;
-			const struct vb2_v4l2_buffer *ref_buf;
-			unsigned int position;
-			u8 ref_idx = i + j;
-			u8 dpb_idx;
+		dpb_idx = ref_list[i];
+		dpb = &decode->dpb[dpb_idx];
 
-			if (ref_idx >= num_ref)
-				break;
-
-			dpb_idx = ref_list[ref_idx];
-			dpb = &decode->dpb[dpb_idx];
-
-			if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE))
-				continue;
+		if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_VALID))
+			continue;
 
-			ref_buf = to_vb2_v4l2_buffer(ctx->dst_bufs[dpb->buf_index]);
-			cedrus_buf = vb2_v4l2_to_cedrus_buffer(ref_buf);
-			position = cedrus_buf->codec.h264.position;
+		if (!(dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_ACTIVE))
+			continue;
 
-			sram_array[i] |= position << (j * 8 + 1);
-			if (ref_buf->field == V4L2_FIELD_BOTTOM)
-				sram_array[i] |= BIT(j * 8);
-		}
+		sram_array[i] |= dpb_idx << 1;
+		if (dpb->flags & V4L2_H264_DPB_ENTRY_FLAG_BOTTOM_FIELD)
+			sram_array[i] |= BIT(0);
 	}
 
-	size = min((unsigned int)ALIGN(num_ref, 4), sizeof(sram_array));
-	cedrus_h264_write_sram(dev, sram, &sram_array, size);
+	cedrus_h264_write_sram(dev, sram, &sram_array, num_ref);
 }
 
 static void cedrus_write_ref_list0(struct cedrus_ctx *ctx,
@@ -222,95 +200,118 @@ static void cedrus_write_scaling_lists(struct cedrus_ctx *ctx,
 		run->h264.scaling_matrix;
 	struct cedrus_dev *dev = ctx->dev;
 
-	return;
-
-	cedrus_h264_write_sram(dev, CEDRUS_SRAM_H264_SCALING_LIST_8x8,
-			       scaling->scaling_list_8x8,
-			       sizeof(scaling->scaling_list_8x8));
-
+	cedrus_h264_write_sram(dev, CEDRUS_SRAM_H264_SCALING_LIST_8x8_0,
+			       scaling->scaling_list_8x8[0],
+			       sizeof(scaling->scaling_list_8x8[0]));
+	cedrus_h264_write_sram(dev, CEDRUS_SRAM_H264_SCALING_LIST_8x8_1,
+			       scaling->scaling_list_8x8[3],
+			       sizeof(scaling->scaling_list_8x8[0]));
 	cedrus_h264_write_sram(dev, CEDRUS_SRAM_H264_SCALING_LIST_4x4,
 			       scaling->scaling_list_4x4,
 			       sizeof(scaling->scaling_list_4x4));
 }
 
-static void cedrus_write_pred_weight_table(struct cedrus_ctx *ctx,
-					   struct cedrus_run *run)
+static void _cedrus_write_pred_weight_table(struct cedrus_ctx *ctx,
+					    const struct v4l2_h264_weight_factors *factors,
+					    enum cedrus_h264_sram_off sram)
 {
-	const struct v4l2_ctrl_h264_slice_param *slice =
-		run->h264.slice_param;
-	const struct v4l2_h264_pred_weight_table *pred_weight =
-		&slice->pred_weight_table;
 	struct cedrus_dev *dev = ctx->dev;
-	int i, j, k;
+	int j, k;
 
-	cedrus_write(dev, VE_H264_PRED_WEIGHT,
-		     ((pred_weight->chroma_log2_weight_denom & 0xf) << 4) |
-		     ((pred_weight->luma_log2_weight_denom & 0xf) << 0));
+	cedrus_write(dev, VE_AVC_SRAM_PORT_OFFSET, sram << 2);
 
-	cedrus_write(dev, VE_AVC_SRAM_PORT_OFFSET,
-		     CEDRUS_SRAM_H264_PRED_WEIGHT_TABLE << 2);
+	for (j = 0; j < ARRAY_SIZE(factors->luma_weight); j++) {
+		u32 val;
 
-	for (i = 0; i < ARRAY_SIZE(pred_weight->weight_factors); i++) {
-		const struct v4l2_h264_weight_factors *factors =
-			&pred_weight->weight_factors[i];
+		val = ((((u32)factors->luma_offset[j]) & 0x1ff) << 16) |
+			(((u32)factors->luma_weight[j]) & 0xff);
+		cedrus_write(dev, VE_AVC_SRAM_PORT_DATA, val);
+	}
 
-		for (j = 0; j < ARRAY_SIZE(factors->luma_weight); j++) {
+	for (j = 0; j < ARRAY_SIZE(factors->chroma_weight); j++) {
+		for (k = 0; k < ARRAY_SIZE(factors->chroma_weight[0]); k++) {
 			u32 val;
 
-			val = ((factors->luma_offset[j] & 0x1ff) << 16) |
-				(factors->luma_weight[j] & 0x1ff);
+			val = ((((u32)factors->chroma_offset[j][k]) & 0x1ff) << 16) |
+				(((u32)factors->chroma_weight[j][k]) & 0xff);
 			cedrus_write(dev, VE_AVC_SRAM_PORT_DATA, val);
 		}
+	}
+}
 
-		for (j = 0; j < ARRAY_SIZE(factors->chroma_weight); j++) {
-			for (k = 0; k < ARRAY_SIZE(factors->chroma_weight[0]); k++) {
-				u32 val;
+static void cedrus_write_pred_weight_table0(struct cedrus_ctx *ctx,
+					    struct cedrus_run *run)
+{
+	const struct v4l2_ctrl_h264_slice_param *slice =
+		run->h264.slice_param;
+	const struct v4l2_h264_pred_weight_table *pred_weight =
+		&slice->pred_weight_table;
 
-				val = ((factors->chroma_offset[j][k] & 0x1ff) << 16) |
-					(factors->chroma_weight[j][k] & 0x1ff);
-				cedrus_write(dev, VE_AVC_SRAM_PORT_DATA, val);
-			}
-		}
-	}
+	_cedrus_write_pred_weight_table(ctx, &pred_weight->weight_factors[0],
+					CEDRUS_SRAM_H264_PRED_WEIGHT_TABLE0);
+}
+
+static void cedrus_write_pred_weight_table1(struct cedrus_ctx *ctx,
+					    struct cedrus_run *run)
+{
+	const struct v4l2_ctrl_h264_slice_param *slice =
+	run->h264.slice_param;
+	const struct v4l2_h264_pred_weight_table *pred_weight =
+	&slice->pred_weight_table;
+
+	_cedrus_write_pred_weight_table(ctx, &pred_weight->weight_factors[1],
+					CEDRUS_SRAM_H264_PRED_WEIGHT_TABLE1);
 }
 
 static void cedrus_set_params(struct cedrus_ctx *ctx,
 			      struct cedrus_run *run)
 {
+	const struct v4l2_ctrl_h264_decode_param *dec_param = run->h264.decode_param;
 	const struct v4l2_ctrl_h264_slice_param *slice = run->h264.slice_param;
+	const struct v4l2_h264_pred_weight_table *pred_weight =
+		&slice->pred_weight_table;
 	const struct v4l2_ctrl_h264_pps *pps = run->h264.pps;
 	const struct v4l2_ctrl_h264_sps *sps = run->h264.sps;
+	unsigned int first_mb_in_slice, pic_width_in_mbs;
 	struct cedrus_dev *dev = ctx->dev;
 	dma_addr_t src_buf_addr;
 	u32 offset = slice->header_bit_size;
 	u32 len = (slice->size * 8) - offset;
+	bool mbaff_picture;
+	u8 type;
 	u32 reg;
 
+	type = slice->slice_type % 5;
+
 	cedrus_write(dev, 0x220, 0x02000400);
 	cedrus_write(dev, VE_H264_VLD_LEN, len);
 	cedrus_write(dev, VE_H264_VLD_OFFSET, offset);
 
 	src_buf_addr = vb2_dma_contig_plane_dma_addr(&run->src->vb2_buf, 0);
-	cedrus_write(dev, VE_H264_VLD_END, src_buf_addr + VBV_SIZE - 1);
+	cedrus_write(dev, VE_H264_VLD_END, ALIGN(src_buf_addr + slice->size, 1024) - 1);
 	cedrus_write(dev, VE_H264_VLD_ADDR,
 		     VE_H264_VLD_ADDR_VAL(src_buf_addr) | VE_H264_VLD_ADDR_FIRST | VE_H264_VLD_ADDR_VALID | VE_H264_VLD_ADDR_LAST);
 
 	cedrus_write(dev, VE_H264_TRIGGER_TYPE,
 		     VE_H264_TRIGGER_TYPE_INIT_SWDEC);
 
-	if (((pps->flags & V4L2_H264_PPS_FLAG_WEIGHTED_PRED) &&
-	     (slice->slice_type == V4L2_H264_SLICE_TYPE_P ||
-	      slice->slice_type == V4L2_H264_SLICE_TYPE_SP)) ||
-	    (pps->weighted_bipred_idc == 1 &&
-	     slice->slice_type == V4L2_H264_SLICE_TYPE_B))
-		cedrus_write_pred_weight_table(ctx, run);
+	cedrus_write(dev, VE_H264_PRED_WEIGHT,
+		     ((pred_weight->chroma_log2_weight_denom & 7) << 4) |
+		     ((pred_weight->luma_log2_weight_denom & 7) << 0));
+
+	if (((pps->flags & V4L2_H264_PPS_FLAG_WEIGHTED_PRED) && type == V4L2_H264_SLICE_TYPE_P) ||
+	    (pps->weighted_bipred_idc == 1 && type == V4L2_H264_SLICE_TYPE_B))
+		cedrus_write_pred_weight_table0(ctx, run);
 
-	if ((slice->slice_type == V4L2_H264_SLICE_TYPE_P) ||
-	    (slice->slice_type == V4L2_H264_SLICE_TYPE_SP) ||
-	    (slice->slice_type == V4L2_H264_SLICE_TYPE_B))
+	if (pps->weighted_bipred_idc == 1 && type == V4L2_H264_SLICE_TYPE_B)
+		cedrus_write_pred_weight_table1(ctx, run);
+
+	if ((type == V4L2_H264_SLICE_TYPE_P) ||
+	    (type == V4L2_H264_SLICE_TYPE_SP) ||
+	    (type == V4L2_H264_SLICE_TYPE_B))
 		cedrus_write_ref_list0(ctx, run);
 
-	if (slice->slice_type == V4L2_H264_SLICE_TYPE_B)
+	if (type == V4L2_H264_SLICE_TYPE_B)
 		cedrus_write_ref_list1(ctx, run);
 
 	// picture parameters
@@ -333,7 +334,8 @@ static void cedrus_set_params(struct cedrus_ctx *ctx,
 	cedrus_write(dev, VE_H264_PIC_HDR, reg);
 
 	// sequence parameters
-	reg = BIT(19);
+	reg = 0;
+	reg |= (sps->chroma_format_idc & 0x7) << 19;;
 	reg |= (sps->pic_width_in_mbs_minus1 & 0xff) << 8;
 	reg |= sps->pic_height_in_map_units_minus1 & 0xff;
 	if (sps->flags & V4L2_H264_SPS_FLAG_FRAME_MBS_ONLY)
@@ -344,19 +346,24 @@ static void cedrus_set_params(struct cedrus_ctx *ctx,
 		reg |= BIT(16);
 	cedrus_write(dev, VE_H264_FRAME_SIZE, reg);
 
+	mbaff_picture = !(slice->flags & V4L2_H264_SLICE_FLAG_FIELD_PIC) &&
+		(sps->flags & V4L2_H264_SPS_FLAG_MB_ADAPTIVE_FRAME_FIELD);
+	pic_width_in_mbs = sps->pic_width_in_mbs_minus1 + 1;
+	first_mb_in_slice = slice->first_mb_in_slice;
+
 	// slice parameters
 	reg = 0;
-	/*
-	 * FIXME: This bit marks all the frames as references. This
-	 * should probably be set based on nal_ref_idc, but the libva
-	 * doesn't pass that information along, so this is not always
-	 * available. We should find something else, maybe change the
-	 * kernel UAPI somehow?
-	 */
-	reg |= BIT(12);
+	reg |= ((first_mb_in_slice % pic_width_in_mbs) & 0xff) << 24;
+	reg |= ((first_mb_in_slice / pic_width_in_mbs) & 0xff) *
+		(mbaff_picture ? 2 : 1) << 16;
+	if (dec_param->nal_ref_idc != 0)
+		reg |= BIT(12);
 	reg |= (slice->slice_type & 0xf) << 8;
 	reg |= slice->cabac_init_idc & 0x3;
-	reg |= BIT(5);
+	if (ctx->codec.h264.last_frame != (s32)slice->frame_num) {
+		reg |= BIT(5);
+		ctx->codec.h264.last_frame = slice->frame_num;
+	}
 	if (slice->flags & V4L2_H264_SLICE_FLAG_FIELD_PIC)
 		reg |= BIT(4);
 	if (slice->flags & V4L2_H264_SLICE_FLAG_BOTTOM_FIELD)
@@ -366,6 +373,7 @@ static void cedrus_set_params(struct cedrus_ctx *ctx,
 	cedrus_write(dev, VE_H264_SLICE_HDR, reg);
 
 	reg = 0;
+	reg |= BIT(12);
 	reg |= (slice->num_ref_idx_l0_active_minus1 & 0x1f) << 24;
 	reg |= (slice->num_ref_idx_l1_active_minus1 & 0x1f) << 16;
 	reg |= (slice->disable_deblocking_filter_idc & 0x3) << 8;
@@ -374,13 +382,6 @@ static void cedrus_set_params(struct cedrus_ctx *ctx,
 	cedrus_write(dev, VE_H264_SLICE_HDR2, reg);
 
 	reg = 0;
-	/*
-	 * FIXME: This bit tells the video engine to use the default
-	 * quantization matrices. This will obviously need to be
-	 * changed to support the profiles supporting custom
-	 * quantization matrices.
-	 */
-	reg |= BIT(24);
 	reg |= (pps->second_chroma_qp_index_offset & 0x3f) << 16;
 	reg |= (pps->chroma_qp_index_offset & 0x3f) << 8;
 	reg |= (pps->pic_init_qp_minus26 + 26 + slice->slice_qp_delta) & 0x3f;
@@ -428,14 +429,35 @@ static void cedrus_h264_setup(struct cedrus_ctx *ctx,
 			      struct cedrus_run *run)
 {
 	struct cedrus_dev *dev = ctx->dev;
+	dma_addr_t addr;
+
+	ctx->codec.h264.last_frame = -1;
+
+	if (!ctx->codec.h264.mv_col_buf_size) {
+		ctx->codec.h264.mv_col_buf_unit_size = DIV_ROUND_UP(ctx->src_fmt.width, 16) *
+			DIV_ROUND_UP(ctx->src_fmt.height, 16) * 32  + SZ_1K;
+
+		ctx->codec.h264.mv_col_buf_size = ctx->codec.h264.mv_col_buf_unit_size * 2 *
+			run->dst->vb2_buf.vb2_queue->num_buffers;
+		ctx->codec.h264.mv_col_buf = dma_alloc_coherent(dev->dev,
+								ctx->codec.h264.mv_col_buf_size,
+								&ctx->codec.h264.mv_col_buf_dma,
+								GFP_KERNEL);
+		if (!ctx->codec.h264.mv_col_buf) {
+			ctx->codec.h264.mv_col_buf_size = 0;
+			return;
+		}
+	}
 
 	cedrus_engine_enable(dev, CEDRUS_CODEC_H264);
 
 	cedrus_write(dev, VE_H264_SDROT_CTRL, 0);
-	cedrus_write(dev, VE_H264_EXTRA_BUFFER1,
-		     ctx->codec.h264.pic_info_buf_dma);
-	cedrus_write(dev, VE_H264_EXTRA_BUFFER2,
-		     (ctx->codec.h264.pic_info_buf_dma) + 0x48000);
+
+	cedrus_write(dev, VE_H264_EXTRA_BUFFER1, ctx->codec.h264.pic_info_buf_dma);
+	addr = ALIGN(ctx->codec.h264.neighbor_info_buf_dma, 0x4000);
+	cedrus_write(dev, VE_H264_EXTRA_BUFFER2, addr);
+	cedrus_write(dev, VE_H264_CUR_MB_NUM, 0);
+	cedrus_write(dev, 0x260, 0);
 
 	cedrus_write_scaling_lists(ctx, run);
 	cedrus_write_frame_list(ctx, run);
@@ -464,23 +486,8 @@ static int cedrus_h264_start(struct cedrus_ctx *ctx)
 		goto err_pic_buf;
 	}
 
-	ctx->codec.h264.mv_col_buf_size = DIV_ROUND_UP(ctx->src_fmt.width, 16) *
-		DIV_ROUND_UP(ctx->src_fmt.height, 16) * 32;
-	ctx->codec.h264.mv_col_buf = dma_alloc_coherent(dev->dev,
-							ctx->codec.h264.mv_col_buf_size,
-							&ctx->codec.h264.mv_col_buf_dma,
-							GFP_KERNEL);
-	if (!ctx->codec.h264.mv_col_buf) {
-		ret = -ENOMEM;
-		goto err_neighbor_buf;
-	}
-
 	return 0;
 
-err_neighbor_buf:
-	dma_free_coherent(dev->dev, CEDRUS_NEIGHBOR_INFO_BUF_SIZE,
-			  ctx->codec.h264.neighbor_info_buf,
-			  ctx->codec.h264.neighbor_info_buf_dma);
 err_pic_buf:
 	dma_free_coherent(dev->dev, CEDRUS_PIC_INFO_BUF_SIZE,
 			  ctx->codec.h264.pic_info_buf,
